# Generated by Django 4.1 on 2022-08-30 18:13

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('kites_id', models.CharField(blank=True, default='', max_length=6, unique=True, verbose_name='Kites ID')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('username', models.CharField(max_length=20, unique=True, validators=[users.models.UsernameValidator()], verbose_name='Username')),
                ('name', models.CharField(blank=True, default='', max_length=200, verbose_name='Name')),
                ('status_text', models.CharField(blank=True, default='', max_length=250)),
                ('contact_number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$', code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>')], verbose_name='Contact Number')),
                ('whatsapp_number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$', code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>')], verbose_name='Whatsapp Number')),
                ('area_of_interest', models.CharField(blank=True, choices=[('Administration', 'Administration'), ('Education', 'Education'), ('Health', 'Health'), ('Environment', 'Environment'), ('Media', 'Media'), ('Technology', 'Technology'), ('Art & Culture', 'Art & Culture')], default='', max_length=20, verbose_name='Area of Interest')),
                ('blood_group', models.CharField(blank=True, choices=[('A Positive', 'A Positive'), ('A Negative', 'A Negative'), ('B Positive', 'B Positive'), ('B Negative', 'B Negative'), ('O Positive', 'O Positive'), ('O Negative', 'O Negative'), ('AB Positive', 'AB Positive'), ('AB Negative', 'AB Negative')], default='', max_length=50, verbose_name='Blood Group')),
                ('qualification', models.CharField(blank=True, choices=[('SSLC', 'SSLC'), ('Plus Two', 'Plus Two'), ('Under Graduate', 'Under Graduate'), ('Post Graduate', 'Post Graduate'), ('M Phil', 'M Phil'), ('Phd', 'Phd')], default='', max_length=100, verbose_name='Education Qualification')),
                ('subject', models.CharField(blank=True, default='', max_length=100, verbose_name='Subject ( major )')),
                ('occupation', models.CharField(blank=True, default='', max_length=200, verbose_name='Occupation')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Non Binary', 'Non Binary'), ('Gender Non-Conforming', 'Gender Non-Conforming'), ('Gender Fluid', 'Gender Fluid'), ('Gender Queer', 'Gender Queer'), ('Agender Two-Spirit', 'Agender Two-Spirit'), ('Khawaja Sira', 'Khawaja Sira'), ('Hijra', 'Hijra'), ('Muxe', 'Muxe'), ('Prefer Not to Say', 'Prefer Not to Say'), ('Prefer to Self Describe', 'Prefer to Self Describe')], default='', max_length=50, verbose_name='Gender')),
                ('date_of_birth', models.DateField(blank=True, default='2022-08-30', verbose_name='Date Of Birth')),
                ('current_address', models.TextField(blank=True, default='', max_length=200, verbose_name='Current Address')),
                ('state_current', models.CharField(blank=True, choices=[('Andhra Pradesh', 'Andhra Pradesh'), ('Arunachal Pradesh', 'Arunachal Pradesh'), ('Assam', 'Assam'), ('Bihar', 'Bihar'), ('Chhattisgarh', 'Chhattisgarh'), ('Goa', 'Goa'), ('Gujarat', 'Gujarat'), ('Haryana', 'Haryana'), ('Himachal Pradesh', 'Himachal Pradesh'), ('Jharkhand', 'Jharkhand'), ('Karnataka', 'Karnataka'), ('Kerala', 'Kerala'), ('Madhya Pradesh', 'Madhya Pradesh'), ('Maharashtra', 'Maharashtra'), ('Manipur', 'Manipur'), ('Meghalaya', 'Meghalaya'), ('Mizoram', 'Mizoram'), ('Nagaland', 'Nagaland'), ('Odisha', 'Odisha'), ('Punjab', 'Punjab'), ('Rajasthan', 'Rajasthan'), ('Sikkim', 'Sikkim'), ('Tamil Nadu', 'Tamil Nadu'), ('Telangana', 'Telangana'), ('Tripura', 'Tripura'), ('Uttar Pradesh', 'Uttar Pradesh'), ('Uttarakhand', 'Uttarakhand'), ('West Bengal', 'West Bengal'), ('Andaman and Nicobar Islands', 'Andaman and Nicobar Islands'), ('Chandigarh', 'Chandigarh'), ('Dadra and Nagar Haveli and Daman and Diu', 'Dadra and Nagar Haveli and Daman and Diu'), ('Delhi', 'Delhi'), ('Jammu and Kashmir', 'Jammu and Kashmir'), ('Ladakh', 'Ladakh'), ('Lakshadweep', 'Lakshadweep'), ('Puducherry', 'Puducherry')], default='', max_length=100, verbose_name='Current State')),
                ('district_current', models.CharField(blank=True, max_length=100, verbose_name='Permanent District')),
                ('permanent_address', models.TextField(blank=True, default='', max_length=200, verbose_name='Permanent Address')),
                ('state_permanent', models.CharField(blank=True, choices=[('Andhra Pradesh', 'Andhra Pradesh'), ('Arunachal Pradesh', 'Arunachal Pradesh'), ('Assam', 'Assam'), ('Bihar', 'Bihar'), ('Chhattisgarh', 'Chhattisgarh'), ('Goa', 'Goa'), ('Gujarat', 'Gujarat'), ('Haryana', 'Haryana'), ('Himachal Pradesh', 'Himachal Pradesh'), ('Jharkhand', 'Jharkhand'), ('Karnataka', 'Karnataka'), ('Kerala', 'Kerala'), ('Madhya Pradesh', 'Madhya Pradesh'), ('Maharashtra', 'Maharashtra'), ('Manipur', 'Manipur'), ('Meghalaya', 'Meghalaya'), ('Mizoram', 'Mizoram'), ('Nagaland', 'Nagaland'), ('Odisha', 'Odisha'), ('Punjab', 'Punjab'), ('Rajasthan', 'Rajasthan'), ('Sikkim', 'Sikkim'), ('Tamil Nadu', 'Tamil Nadu'), ('Telangana', 'Telangana'), ('Tripura', 'Tripura'), ('Uttar Pradesh', 'Uttar Pradesh'), ('Uttarakhand', 'Uttarakhand'), ('West Bengal', 'West Bengal'), ('Andaman and Nicobar Islands', 'Andaman and Nicobar Islands'), ('Chandigarh', 'Chandigarh'), ('Dadra and Nagar Haveli and Daman and Diu', 'Dadra and Nagar Haveli and Daman and Diu'), ('Delhi', 'Delhi'), ('Jammu and Kashmir', 'Jammu and Kashmir'), ('Ladakh', 'Ladakh'), ('Lakshadweep', 'Lakshadweep'), ('Puducherry', 'Puducherry')], default='', max_length=100, verbose_name='Permanent State')),
                ('district_permanent', models.CharField(blank=True, max_length=100, verbose_name='Permanent District')),
                ('skills_endorsements', models.TextField(blank=True, default='', max_length=200, verbose_name='Skills & Endorsements')),
                ('previous_volunteering_experience', models.TextField(blank=True, default='', max_length=200, verbose_name='Previous Volunteering Experience')),
                ('achievements', models.TextField(blank=True, default='', max_length=200, verbose_name='Achievements')),
                ('why_kites', models.TextField(blank=True, default='', max_length=200, verbose_name='Why Kites ?')),
                ('why_contribute_community', models.TextField(blank=True, default='', max_length=200, verbose_name='How do you wish to contribute to the community ?')),
                ('profile_image', models.URLField(blank=True, default='https://cdn.kites.foundation/img/logo.png', verbose_name='Profile Image Url')),
                ('tshirt_size', models.CharField(blank=True, default='', max_length=10)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('updated_on', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Users',
            },
        ),
    ]
